# 190. Reverse Bits

from utils import chunk


class Solution:
    def reverseBits(self, n: int) -> int:
        n = ((n & 0b0000_0000_0000_0000_1111_1111_1111_1111) << 16) | ((n & 0b1111_1111_1111_1111_0000_0000_0000_0000) >> 16)
        n = ((n & 0b0000_0000_1111_1111_0000_0000_1111_1111) << 8)  | ((n & 0b1111_1111_0000_0000_1111_1111_0000_0000) >> 8)
        n = ((n & 0b0000_1111_0000_1111_0000_1111_0000_1111) << 4)  | ((n & 0b1111_0000_1111_0000_1111_0000_1111_0000) >> 4)
        n = ((n & 0b0011_0011_0011_0011_0011_0011_0011_0011) << 2)  | ((n & 0b1100_1100_1100_1100_1100_1100_1100_1100) >> 2)
        n = ((n & 0b0101_0101_0101_0101_0101_0101_0101_0101) << 1)  | ((n & 0b1010_1010_1010_1010_1010_1010_1010_1010) >> 1)
        return n


if __name__ == "__main__":
    testSize = 1
    puzzles = [
        int("00000010100101000001111010011100", 2),
        int("11111111111111111111111111111101", 2),
    ]
    for puzzle in chunk(puzzles, testSize):
        print(Solution().reverseBits(*puzzle))
